#
# Copyright (c) 2022-2023, Jes√∫s Daniel Colmenares Oviedo <DtxdF@disroot.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

lib_load "${LIBDIR}/check_func"

lib_modules_load()
{
	local _o
	local module

	if [ $# -eq 0 ]; then
		lib_err ${EX_USAGE} "usage: lib_modules_load [-m module] file"
	fi

	while getopts ":m:" _o; do
		case "${_o}" in
			m)
				module="${OPTARG}"
				;;
			*)
				lib_modules_load # usage
				;;
		esac
	done
	shift $((OPTIND-1))

	local file="$1"
	if [ -z "${file}" ]; then
		lib_modules_load # usage
	fi

        module="${module:-${file}}"

	if lib_check_kernmod "${module}"; then
                lib_debug -- "${file} kernel module already loaded."
		return 0
	fi

	if kldload -- "${file}"; then
		lib_debug -- "${file} kernel module loaded."
	else
		lib_err ${EX_SOFTWARE} "Unable to load kernel module \`${file}\`"
	fi

        return 0
}

lib_modules_linuxmods()
{
	lib_modules_load "fdescfs"
	lib_modules_load "linprocfs"
	lib_modules_load "linsysfs"
	lib_modules_load "pty"
	lib_modules_load "tmpfs"

	case "`sysctl -n hw.machine_arch`" in
		aarch64)
			lib_modules_load -m 'linux64elf' linux64
			;;
		amd64)
			lib_modules_load -m 'linuxelf' linux
			lib_modules_load -m 'linux64elf' linux64
			;;
		i386)
			lib_modules_load -m 'linuxelf' linux
			;;
	esac
}
