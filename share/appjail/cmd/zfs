#!/bin/sh
#
# Copyright (c) 2022-2023, Jes√∫s Daniel Colmenares Oviedo <DtxdF@disroot.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

lib_load "${LIBDIR}/check_func"
lib_load "${LIBDIR}/zfs"

zfs_desc="Common ZFS commands for jails."

zfs_main()
{
	if [ "${ENABLE_ZFS}" = "0" ]; then
		lib_err ${EX_CONFIG} "ZFS is not enabled in the configuration file. This command cannot be used."
	fi

	local entity="$1"; shift
	if lib_check_empty "${entity}"; then
		zfs_usage
		exit ${EX_USAGE}
	fi

	local jail_name="$1"; shift
	if lib_check_empty "${jail_name}"; then
		zfs_usage
		exit ${EX_USAGE}
	fi

	local dataset="${ZPOOL}/${ZROOTFS}/${ZFS_JAILS_NAME}/${jail_name}"

	case "${entity}" in
		clone-src)
			local dst="$1"; shift
			if lib_check_empty "${dst}"; then
				zfs_usage
				exit ${EX_USAGE}
			fi

			zfs clone "$@" "${dataset}" "${dst}"
			;;
		clone-dst)
			local src="$1"; shift
			if lib_check_empty "${src}"; then
				zfs_usage
				exit ${EX_USAGE}
			fi

			zfs clone "$@" "${src}" "${dataset}"
			;;
		create|destroy|get|inherit|list|recv|send|set|snapshot)
			zfs ${entity} "$@" "${dataset}"
			;;
		*) 
			zfs_usage
			exit ${EX_USAGE}
			;;
	esac

}

zfs_help()
{
	man 1 appjail-zfs
}

zfs_usage()
{
	cat << EOF
usage: zfs clone-dst <jail> <src> [args ...]
       zfs clone-src <jail> <dst> [args ...]
       zfs create <jail> [args ...]
       zfs destroy <jail> [args ...]
       zfs get <jail> [args ...]
       zfs inherit <jail> [args ...]
       zfs list <jail> [args ...]
       zfs recv <jail> [args ...]
       zfs send <jail> [args ...]
       zfs set <jail> [args ...]
       zfs snapshot <jail> [args ...]
EOF
}
