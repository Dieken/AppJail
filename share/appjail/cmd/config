#!/bin/sh
#
# Copyright (c) 2022-2023, Jes√∫s Daniel Colmenares Oviedo <DtxdF@disroot.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

lib_load "${LIBDIR}/check_func"
lib_load "${LIBDIR}/jail"
lib_load "${LIBDIR}/replace"
lib_load "${LIBDIR}/tempfile"

config_desc="Set, get or remove a template parameter for a given jail."

config_main()
{
	local _o
	local opt_all=0
	local opt_check_only=0
	local opt_editor=0
	local opt_get=0
	local opt_insert=0
	local opt_ignore_unkvars=0
	local opt_test_required=0
	local opt_show_required=0
	local opt_list_columns=0
	local opt_show_value=1
	local opt_show_name=1
	local opt_add_column=0
	local opt_all_rows=0
	local opt_required=0
	local opt_set=0
	local opt_remove=0
	local opt_parameter=0 parameter=
	local column=0
	local jail_name=
	local row=0
	local template= template_temp escape_temp_template
	local jailparam_extra jailparam_cmd
	local errlevel=0 error_reporting=0
	local current_index=0 total_items

	if [ $# -eq 0 ]; then
		config_usage
		exit ${EX_USAGE}
	fi

	while getopts ":AcegIiKklNnoPrsxa:C:j:R:t:" _o; do
		case "${_o}" in
			a|C|j|R|t)
				if lib_check_empty "${OPTARG}"; then
					config_usage
					exit ${EX_USAGE}
				fi
				;;
		esac

		case "${_o}" in
			A)
				opt_all=1
				;;
			c)
				opt_check_only=1
				;;
			e)
				opt_editor=1
				;;
			g)
				opt_get=1
				;;
			I)
				opt_insert=1
				;;
			i)
				opt_ignore_unkvars=1
				;;
			K)
				opt_test_required=1
				;;
			k)
				opt_show_required=1
				;;
			l)
				opt_list_columns=1
				;;
			N)
				opt_show_value=0
				;;
			n)
				opt_show_name=0
				;;
			o)
				opt_add_column=1
				;;
			P)
				opt_all_rows=1
				;;
			r)
				opt_required=1
				;;
			s)
				opt_set=1
				;;
			x)
				opt_remove=1
				;;
			a)
				opt_parameter=1
				parameter="${OPTARG}"
				;;
			C)
				column="${OPTARG}"
				;;
			j)
				jail_name="${OPTARG}"
				;;
			R)
				row="${OPTARG}"
				;;
			t)
				template="${OPTARG}"
				;;
			*)
				config_usage
				exit ${EX_USAGE}
				;;
		esac
	done

	if [ -n "${jail_name}" ]; then
		if ! lib_check_jailname "${jail_name}"; then
			lib_err ${EX_DATAERR} "Invalid jail name \"${jail_name}\""
		fi

		if [ ! -d "${JAILDIR}/${jail_name}/conf" ]; then
			lib_err ${EX_NOINPUT} "Cannot find the jail \`${jail_name}\`."
		fi

		template="${JAILDIR}/${jail_name}/conf/template.conf"

		if [ ! -f "${template}" ]; then
			touch "${template}"
		fi
	fi

	if [ -z "${template}" ]; then
		config_usage
		exit ${EX_USAGE}
	fi

	if [ ! -f "${template}" ]; then
		lib_err ${EX_NOINPUT} "Cannot find the template \`${template}\`."
	fi

	if [ ! -r "${template}" -o ! -w "${template}" ]; then
		lib_err ${EX_NOPERM} "The ${template} template must be readable and writable."
	fi

	if [ ${opt_editor} -eq 1 ]; then
		${EDITOR:-ee} "${template}"
	elif [ ${opt_get} -eq 1 -a ${opt_all} -eq 0 ]; then
		if [ -z "${parameter}" ]; then
			config_usage
			exit ${EX_USAGE}
		fi

		if [ ${opt_show_name} -eq 0 ]; then
			jailparam_extra="-n"
		fi

		if [ ${opt_show_value} -eq 0 ]; then
			jailparam_extra="-N"
		fi

		if [ ${opt_ignore_unkvars} -eq 1 ]; then
			jailparam_extra="${jailparam_extra} -i"
		fi

		if [ ${opt_check_only} -eq 1 ]; then
			jailparam_extra="${jailparam_extra} -c"
		fi

		if [ ${opt_all_rows} -eq 1 ]; then
			jailparam_extra="${jailparam_extra} -P"
		fi

		if [ ${opt_list_columns} -eq 1 ]; then
			jailparam_extra="${jailparam_extra} -l"
		fi

		lib_jail_readtemplate "${template}" | lib_get_jailparam ${jailparam_extra} -a "${parameter}" -C "${column}" -R "${row}"

		error_reporting=$?
	elif [ ${opt_get} -eq 1 -a ${opt_all} -eq 1 ]; then
		if [ ${opt_list_columns} -eq 1 ]; then
			jailparam_extra="${jailparam_extra} -l"
		fi

		lib_jail_readtemplate "${template}" | lib_get_jailparam ${jailparam_extra} -A
	elif [ ${opt_test_required} -eq 1 ]; then
		lib_check_reqparams "${template}"

		error_reporting=$?
	elif [ ${opt_show_required} -eq 1 ]; then
		lib_jail_readtemplate "${template}" | lib_get_reqparams

		error_reporting=$?
	elif [ ${opt_insert} -eq 1 ]; then
		if [ ${opt_parameter} -eq 0 ]; then
			config_usage
			exit ${EX_USAGE}
		fi

		if [ ${opt_required} -eq 1 ]; then
			jailparam_extra="-r"
		fi

		template_temp="`lib_generate_tempfile`"

		errlevel=$?
		if [ ${errlevel} -ne 0 ]; then
			return ${errlevel}
		fi

		if ! cat -- "${template}" > "${template_temp}"; then
			lib_err ${EX_IOERR} "Error writing ${template} to ${template_temp}"
		fi

		escape_template_temp=`lib_escape_string "${template_temp}"`

		lib_atexit_add "rm -f \"${escape_template_temp}\""

		lib_insert_jailparam \
			${jailparam_extra} \
			-a "${parameter}" >> "${template_temp}"

		errlevel=$?
		if [ ${errlevel} -ne 0 ]; then
			lib_err ${errlevel} "There was an error editing the template."
		fi

		if ! cat -- "${template_temp}" > "${template}"; then
			lib_err ${EX_IOERR} "Error writing ${template_temp} to ${template}"
		fi
	elif [ ${opt_set} -eq 1 ]; then
		if [ ${opt_parameter} -eq 0 ]; then
			config_usage
			exit ${EX_USAGE}
		fi

		template_temp="`lib_generate_tempfile`"

		errlevel=$?
		if [ ${errlevel} -ne 0 ]; then
			return ${errlevel}
		fi

		escape_template_temp=`lib_escape_string "${template_temp}"`

		lib_atexit_add "rm -f \"${escape_template_temp}\""

		if [ ${opt_required} -eq 1 ]; then
			jailparam_extra="-r"
		fi

		if [ ${opt_add_column} -eq 1 ]; then
			jailparam_extra="${jailparam_extra} -o"
		fi

		lib_set_jailparam \
			${jailparam_extra} \
			-a "${parameter}" \
			-C "${column}" \
			-R "${row}" < "${template}" > "${template_temp}"

		errlevel=$?
		if [ ${errlevel} -ne 0 ]; then
			lib_err ${errlevel} "There was an error editing the template."
		fi

		if ! cat -- "${template_temp}" > "${template}"; then
			lib_err ${EX_IOERR} "Error writing ${template_temp} to ${template}"
		fi
	elif [ ${opt_remove} -eq 1 -a ${opt_all} -eq 1 ]; then
		template_temp="`lib_generate_tempfile`"

		errlevel=$?
		if [ ${errlevel} -ne 0 ]; then
			return ${errlevel}
		fi

		escape_template_temp=`lib_escape_string "${template_temp}"`

		lib_atexit_add "rm -f \"${escape_template_temp}\""

		lib_rm_jailparam -A < "${template}" > "${template_temp}"

		if [ $? -ne 0 ]; then
			lib_err ${EX_SOFTWARE} "There was an error editing the template."
		fi

		if ! cat -- "${template_temp}" > "${template}"; then
			lib_err ${EX_IOERR} "Error writing ${template_temp} to ${template}"
		fi
	elif [ ${opt_remove} -eq 1 -a ${opt_all} -eq 0 ]; then
		if [ ${opt_parameter} -eq 0 ]; then
			config_usage
			exit ${EX_USAGE}
		fi

		template_temp="`lib_generate_tempfile`"

		errlevel=$?
		if [ ${errlevel} -ne 0 ]; then
			return ${errlevel}
		fi

		escape_template_temp=`lib_escape_string "${template_temp}"`

		lib_atexit_add "rm -f \"${escape_template_temp}\""

		if [ ${opt_ignore_unkvars} -eq 1 ]; then
			jailparam_extra="-i"
		fi

		if [ ${opt_all_rows} -eq 1 ]; then
			jailparam_extra="${jailparam_extra} -P"
		fi

		lib_rm_jailparam \
			${jailparam_extra} \
			-a "${parameter}" \
			-C "${column}" \
			-R "${row}" < "${template}" > "${template_temp}"

		error_reporting=$?
		
		if [ ${error_reporting} -ne 0 ]; then
			if [ ${opt_ignore_unkvars} -eq 0 ]; then
				lib_err ${EX_SOFTWARE} "There was an error editing the template."
			fi
		fi

		if ! cat -- "${template_temp}" > "${template}"; then
			lib_err ${EX_IOERR} "Error writing ${template_temp} to ${template}"
		fi
	else
		config_usage
		exit ${EX_USAGE}
	fi

	return ${error_reporting}
}

lib_template2jail_conf()
{
	local jail_name
	local template
	local line
	local opt_add
	local parameter value op

	jail_name="$1"
	template="$2"

	if [ -z "${jail_name}" -o -z "${template}" ]; then
		lib_err ${EX_USAGE} "usage: lib_template2jail_conf jail_name template"
	fi

	if [ ! -f "${template}" ]; then
		lib_err ${EX_NOINPUT} "Cannot find the template \`${template}\`."
	fi

	printf "%s {\n" "${jail_name}"

	lib_jail_readtemplate "${template}" | while IFS= read -r line
	do
		parameter=`lib_jailparam_name "${line}" :`
		value=`lib_jailparam_value "${line}" :`

		opt_add=0
		if lib_check_jaillist "${parameter}"; then
			opt_add=1
		fi

		parameter=`_lib_wipe_jailparam "${parameter}"`

		if ! lib_check_jailparam "${parameter}"; then
			lib_err ${EX_DATAERR} "Invalid parameter: ${parameter}"
		fi

		if ! lib_check_empty "${value}"; then
			if [ ${opt_add} -eq 0 ]; then
				op="="
			else
				op="+="
			fi

			value=`lib_jail_tolist "${value}"`

			printf "\t%s %s %s;\n" "${parameter}" "${op}" "${value}"
		else
			printf "\t%s;\n" "${parameter}"
		fi
	done

	printf "}\n"
}

lib_jail_tolist()
{
	local template_list="$1"

	lib_split_jailparams "${template_list}" | sed -Ee 's/"/\\"/g' -e 's/^(.+)$/"\1"/' | tr '\n' ',' | sed -Ee 's/,$/\n/'
}

lib_jail_readtemplate()
{
	local template="$1"
	if [ -z "${template}" ]; then
		lib_err ${EX_USAGE} "usage: lib_jail_readtemplate template"
	fi

	grep -Ev '^[[:space:]]*#' "${template}" | grep -Eve '^[[:space:]]*$' | sed -Ee 's/^[[:space:]]*//'
}

lib_check_reqparams()
{
	local template="$1"
	if [ -z "${template}" ]; then
		lib_err ${EX_USAGE} "usage: lib_check_reqparams template"
	fi

	if [ `lib_jail_readtemplate "${template}" | lib_get_reqparams | wc -l` -gt 0 ]; then
		return 0
	else
		return 1
	fi
}

lib_get_reqparams()
{
	lib_get_jailparam -A | grep -E '^\*'
}

lib_get_jailparam()
{
	local _o

	# options
	local opt_all=0
	local opt_check_only=0
	local opt_ignore_unkvars=0
	local opt_list_columns=0
	local opt_show_name=1
	local opt_show_value=1
	local opt_all_rows=0
	local parameter=
	# column
	local column=0
	# row
	local current_row=-1 row=0

	# misc
	local errlevel=0
	local found=0

	if [ $# -eq 0 ]; then
		lib_err ${EX_USAGE} "usage: lib_get_jailparam -A [-l] | -a parameter [-cilNnP] [-C column] [-R row]"
	fi

	while getopts ":AcilNnPa:C:R:" _o; do
		case "${_o}" in
			A)
				opt_all=1
				;;
			c)
				opt_check_only=1
				;;
			i)
				opt_ignore_unkvars=1
				;;
			l)
				opt_list_columns=1
				;;
			N)
				opt_show_name=1
				opt_show_value=0
				;;
			n)
				opt_show_value=1
				opt_show_name=0
				;;
			P)
				opt_all_rows=1
				;;
			a)
				parameter="${OPTARG}"
				;;
			C)
				column="${OPTARG}"
				;;
			R)
				row="${OPTARG}"
				;;
			*)
				lib_get_jailparam # usage
				;;
		esac
	done

	if [ ${opt_all} -eq 0 ]; then
		if [ -z "${parameter}" ]; then
			lib_get_jailparam # usage
		fi
	fi

	if ! lib_check_number "${column}"; then
		lib_err ${EX_DATAERR} "${column} is an invalid column."
	fi

	if ! lib_check_number "${row}" ; then
		lib_err ${EX_DATAERR} "${row} is an invalid row."
	fi

	if [ ${opt_all} -eq 0 ]; then
		parameter=`lib_jailparam_name "${parameter}" =`
		if ! lib_check_jailparam "${parameter}"; then
			lib_err ${EX_DATAERR} "Invalid parameter: ${parameter}"
		fi
	fi

	local jail_args
	while IFS= read -r jail_args; do
		local jail_parameter=`lib_jailparam_name "${jail_args}" :`
		local jail_parameter_raw=`_lib_wipe_jailparam "${jail_parameter}"`

		if ! lib_check_jailparam "${jail_parameter_raw}"; then
			lib_err ${EX_DATAERR} "Invalid parameter: ${jail_parameter_raw}"
		fi
		
		# All parameters
		if [ ${opt_all} -eq 1 ]; then
			local jail_value=`lib_jailparam_value "${jail_args}" : | sed -Ee 's/^[[:space:]]//'`

			if [ ${opt_list_columns} -eq 1 ]; then
				if lib_check_empty "${jail_value}"; then
					continue
				fi

				lib_split_jailparams "${jail_value}"
			else
				_lib_jailparam_printparam "${jail_parameter}" "${jail_value}" ${opt_show_name} ${opt_show_value}
			fi
			continue
		fi

		# Individual parameters.
		if [ "${parameter}" != "${jail_parameter_raw}" ]; then
			continue
		fi

		current_row=$((current_row+1))

		if [ ${current_row} -ne ${row} ]; then
			if [ ${opt_all_rows} -eq 0 ]; then
				continue
			fi
		fi

		if [ ${opt_check_only} -eq 1 ]; then
			return 0
		fi

		found=1

		local jail_value=`lib_jailparam_value "${jail_args}" : | sed -Ee 's/^[[:space:]]//'`

		if [ ${column} -eq 0 ]; then
			if [ ${opt_list_columns} -eq 1 ]; then
				if lib_check_empty "${jail_value}"; then
					continue
				fi

				lib_split_jailparams "${jail_value}"
			else
				_lib_jailparam_printparam "${jail_parameter}" "${jail_value}" ${opt_show_name} ${opt_show_value}
			fi
			continue
		else
			local columns=`lib_split_jailparams "${jail_value}"`
			local column_value=

			if [ -n "${columns}" ]; then
				column_value=`lib_get_jailcolumn "${columns}" "${column}"`
			fi

			if [ -n "${column_value}" ]; then
				_lib_jailparam_printparam "${jail_parameter}" "${column_value}" ${opt_show_name} ${opt_show_value}
			else
				if [ ${opt_ignore_unkvars} -eq 0 ]; then
					lib_err ${EX_DATAERR} "Column index (${jail_parameter}:(${row}:${column})) out of range."
				fi

				return ${EX_DATAERR}
			fi
		fi

		# Break if all rows are used, since it is not needed to keep looking for new fields.
		if [ ${opt_all_rows} -eq 0 ]; then
			break
		fi
	done

	if [ ${opt_all} -eq 0 -a ${found} -eq 0 ]; then
		if [ ${opt_ignore_unkvars} -eq 0 -a ${opt_check_only} -eq 0 ]; then
			lib_err ${EX_DATAERR} "Unknown variable '${parameter}:(${row}:${column})'"
		fi

		return ${EX_DATAERR}
	fi

	return 0
}

lib_insert_jailparam()
{
	local _o

	# options
	local opt_required=0
	local parameter=

	while getopts ":ra:" _o; do
		case "${_o}" in
			r)
				opt_required=1
				;;
			a)
				parameter="${OPTARG}"
				;;
			*)
				lib_insert_jailparam # usage
				;;
		esac
	done

	if [ -z "${parameter}" ]; then
		lib_insert_jailparam # usage
	fi

	local user_parameter=`lib_jailparam_name "${parameter}" =`
	if ! lib_check_jailparam "${user_parameter}"; then
		lib_err ${EX_DATAERR} "Invalid parameter: ${user_parameter}"
	fi

	local user_value=`lib_jailparam_value "${parameter}" =`

	if [ ${opt_required} -eq 1 ]; then
		user_parameter="*${user_parameter}"
	fi

	printf "%s+: %s\n" "${user_parameter}" "${user_value}"
}

lib_set_jailparam()
{
	local _o

	# options
	local opt_add_column=0
	local opt_required=0
	local parameter=
	local template=
	# column
	local column=0
	# row
	local current_row=-1 row=0

	# misc
	local found=0

	if [ $# -eq 0 ]; then
		lib_err ${EX_USAGE} "usage: lib_set_jailparam -a parameter [-or] [-C column] [-R row]"
	fi

	while getopts ":ora:C:R:" _o; do
		case "${_o}" in
			o)
				opt_add_column=1
				;;
			r)
				opt_required=1
				;;
			a)
				parameter="${OPTARG}"
				;;
			C)
				column="${OPTARG}"
				;;
			R)
				row="${OPTARG}"
				;;
			*)
				lib_set_jailparam # usage
				;;
		esac
	done

	if [ -z "${parameter}" ]; then
		lib_set_jailparam # usage
	fi

	if ! lib_check_number "${column}"; then
		lib_err ${EX_DATAERR} "${column} is an invalid column."
	fi

	if ! lib_check_number "${row}" ; then
		lib_err ${EX_DATAERR} "${row} is an invalid row."
	fi

	local user_parameter=`lib_jailparam_name "${parameter}" =`
	if ! lib_check_jailparam "${user_parameter}"; then
		lib_err ${EX_DATAERR} "Invalid parameter: ${user_parameter}"
	fi

	local user_value=`lib_jailparam_value "${parameter}" =`

	local jail_args
	while IFS= read -r jail_args; do
		# Empty
		if lib_check_empty "${jail_args}"; then
			printf "%s\n" "${jail_args}"
			continue
		fi
		
		# Comments
		if lib_check_comment "${jail_args}"; then
			printf "%s\n" "${jail_args}"
			continue
		fi

		local jail_parameter=`lib_jailparam_name "${jail_args}" :`
		local jail_parameter_raw=`_lib_wipe_jailparam "${jail_parameter}"`

		if ! lib_check_jailparam "${jail_parameter_raw}"; then
			lib_err ${EX_DATAERR} "Invalid parameter: ${jail_parameter_raw}"
		fi

		if [ "${user_parameter}" != "${jail_parameter_raw}" ]; then
			printf "%s\n" "${jail_args}"
			continue
		fi

		current_row=$((current_row+1))

		if [ ${current_row} -ne ${row} ]; then
			printf "%s\n" "${jail_args}"
			continue
		fi

		found=1

		if [ ${opt_required} -eq 1 ] && ! lib_check_jailreq "${jail_parameter}"; then # Add *
			jail_parameter="*${jail_parameter}"
		elif [ ${opt_required} -eq 0 ]; then # Remove *
			jail_parameter=`printf "%s" "${jail_parameter}" | sed -Ee 's/^\*//'`
		fi
		
		if [ ${column} -eq 0 -a ${opt_add_column} -eq 0 ]; then
			printf "%s\n" "${jail_parameter}: ${user_value}"
			continue
		fi

		jail_value=`lib_jailparam_value "${jail_args}" : | sed -Ee 's/^[[:space:]]//'`

		if [ -z "${jail_value}" ]; then
			printf "%s\n" "${jail_parameter}: ${user_value}"
			continue
		fi
		
		if lib_check_empty "${user_value}"; then
			lib_err ${EX_DATAERR} "It is not possible to add an empty value to a list."
		fi
		
		local columns=`lib_split_ujailparams "${jail_value}"`

		printf "%s" "${jail_parameter}: "

		local column_total=`printf "%s\n" "${columns}" | wc -l`

		if [ ${opt_add_column} -eq 1 ]; then
			if [ ${column_total} -eq 0 ]; then
				printf "%s\n" "${user_value}"
			else
				printf "%s %s\n" "${jail_value}" "${user_value}"
			fi

			continue
		fi

		local current_column=0
		printf "%s\n" "${columns}" | while IFS= read -r column_value; do
			current_column=$((current_column+1))

			if [ ${current_column} -ne ${column} ]; then
				printf "%s" "${column_value}"
				if [ ${current_column} -gt 0 -a ${current_column} -lt ${column_total} ]; then
					printf "%s" " "
				fi

				continue
			fi
			
			printf "%s" "${user_value}"
			if [ ${current_column} -lt ${column_total} ]; then
				printf "%s" " "
			fi
		done

		if [ ${column} -gt ${column_total} ]; then
			if [ ${column_total} -gt 0 ]; then
				printf "%s" " "
			fi

			printf "%s\n" "${user_value}"
		else
			echo
		fi
	done

	if [ ${found} -eq 0 ]; then
		if [ ${current_row} -ge 0 ]; then
			user_parameter="${user_parameter}+"
		fi

		if [ ${opt_required} -eq 1 ]; then
			user_parameter="*${user_parameter}"
		fi

		if [ -n "${user_value}" ]; then
			printf "%s\n" "${user_parameter}: ${user_value}"
		else
			printf "%s\n" "${user_parameter}"
		fi
	fi

	return 0
}

lib_rm_jailparam()
{
	local _o

	# options
	local opt_all=0
	local opt_ignore_unkvars=0
	local opt_all_rows=0
	local parameter=
	# column
	local column=0
	# row
	local current_row=-1 row=0

	# misc
	local found=0

	if [ $# -eq 0 ]; then
		lib_err ${EX_USAGE} "usage: lib_rm_jailparam -A | -a parameter [-iP] [-C column] [-R row]"
	fi
	
	while getopts ":AiPa:C:R:" _o; do
		case "${_o}" in
			A)
				opt_all=1
				;;
			i)
				opt_ignore_unkvars=1
				;;
			P)
				opt_all_rows=1
				;;
			a)
				parameter="${OPTARG}"
				;;
			C)
				column="${OPTARG}"
				;;
			R)
				row="${OPTARG}"
				;;
			*)
				lib_rm_jailparam # usage
				;;
		esac
	done

	if [ ${opt_all} -eq 0 ]; then
		if [ -z "${parameter}" ]; then
			lib_rm_jailparam # usage
		fi
	fi

	if ! lib_check_number "${column}"; then
		lib_err ${EX_DATAERR} "${column} is an invalid column."
	fi

	if ! lib_check_number "${row}" ; then
		lib_err ${EX_DATAERR} "${row} is an invalid row."
	fi

	if [ ! -f "${template}" ]; then
		lib_err ${EX_NOINPUT} "Cannot find the template \`${template}\`."
	fi

	if [ ${opt_all} -eq 0 ]; then
		parameter=`lib_jailparam_name "${parameter}" =`
		if ! lib_check_jailparam "${parameter}"; then
			lib_err ${EX_DATAERR} "Invalid parameter: ${parameter}"
		fi
	fi

	local jail_args
	while IFS= read -r jail_args; do
		# Empty
		if lib_check_empty "${jail_args}"; then
			printf "%s\n" "${jail_args}"
			continue
		fi
		
		# Comments
		if lib_check_comment "${jail_args}"; then
			printf "%s\n" "${jail_args}"
			continue
		fi

		local jail_parameter=`lib_jailparam_name "${jail_args}" :`
		local jail_parameter_raw=`_lib_wipe_jailparam "${jail_parameter}"`

		if ! lib_check_jailparam "${jail_parameter_raw}"; then
			lib_err ${EX_DATAERR} "Invalid parameter: ${jail_parameter_raw}"
		fi

		# all parameters
		if [ ${opt_all} -eq 1 ]; then
			continue
		fi

		# individual parameters
		if [ "${jail_parameter_raw}" != "${parameter}" ]; then
			printf "%s\n" "${jail_args}"
			continue
		fi

		if [ ${opt_all_rows} -eq 1 ]; then
			found=1
			continue
		fi

		current_row=$((current_row+1))

		if [ ${current_row} -ne ${row} ]; then
			printf "%s\n" "${jail_args}"
			continue
		fi

		found=1

		if [ ${column} -eq 0 ]; then
			continue
		fi

		local jail_value=`lib_jailparam_value "${jail_args}" : | sed -Ee 's/^[[:space:]]//'`

		# Remove if empty
		if [ -z "${jail_value}" ]; then
			continue
		fi

		local columns=`lib_split_ujailparams "${jail_value}"`
		local column_total=`printf "%s\n" "${columns}" | wc -l`

		if [ ${column} -gt ${column_total} ]; then
			if [ ${opt_ignore_unkvars} -eq 0 ]; then
				lib_err ${EX_DATAERR} "Column index (${jail_parameter}:${column}) out of range."
			fi

			return ${EX_DATAERR}
		fi

		# A bit of optimization
		if [ ${column} -eq 1 -a ${column_total} -eq 1 ]; then
			continue
		fi

		printf "%s" "${jail_parameter}: "

		local current_column=0
		printf "%s\n" "${columns}" | while IFS= read -r column_value; do
			current_column=$((current_column+1))

			if [ ${current_column} -ne ${column} ]; then
				printf "%s" "${column_value}"

				if [ ${current_column} -lt ${column_total} ]; then
					if [ ${column} -ne ${column_total} -o $((current_column+1)) -lt ${column_total} ]; then
						printf "%s" " "
					fi
				fi
			fi
		done
		echo
	done

	if [ ${opt_all} -eq 0 -a ${found} -eq 0 ]; then
		if [ ${opt_ignore_unkvars} -eq 0 ]; then
			lib_err ${EX_DATAERR} "Unknown variable '${parameter}:(${row}:${column})'"
		fi

		return ${EX_DATAERR}
	fi

	return 0
}

lib_get_jailcolumn()
{
	local column_value
	local current_column=0
	local columns="$1"
	local column2search="$2"

	if [ -z "${columns}" -o -z "${column2search}" ]; then
		lib_err ${EX_USAGE} "usage: lib_get_jailcolumn columns column2search"
	fi

	printf "%s\n" "${columns}" | while IFS= read -r column_value; do
		current_column=$((current_column+1))

		if [ ${current_column} -ne ${column} ]; then
			continue
		fi

		printf "%s\n" "${column_value}"

		break
	done
}

_lib_wipe_jailparam()
{
	local parameter="$1"

	if [ -z "${parameter}" ]; then
		lib_err ${EX_USAGE} "usage: _lib_wipe_jailparam parameter"
	fi

	parameter=`printf "%s" "${parameter}" | sed -Ee 's/\+$//' -e 's/^\*//'`

	printf "%s" "${parameter}"
}

_lib_jailparam_printparam()
{
	local jail_parameter="$1"
	local jail_value="$2"
	local opt_show_name="${3:-1}"
	local opt_show_value="${4:-1}"

	if [ -z "${jail_parameter}" ]; then
		lib_err ${EX_USAGE} "usage: _lib_jailparam_printparam jail_parameter [jail_value] [show_name?] [show_value?]"
	fi

	if [ ${opt_show_name} -eq 1 ]; then
		printf "%s" "${jail_parameter}"
	fi
	if [ ${opt_show_name} -eq 1 -a ${opt_show_value} -eq 1 ]; then
		printf "%s" ": "
	fi
	if [ ${opt_show_value} -eq 1 ]; then
		printf "%s" "${jail_value}"
	fi
	echo
}

lib_check_jaillist()
{
	local parameter="$1"

	if [ -z "${parameter}" ]; then
		lib_err ${EX_USAGE} "usage: lib_check_jaillist parameter"
	fi

	if printf "%s" "${parameter}" | grep -Eq '\+$'; then
		return 0
	else
		return 1
	fi
}

lib_check_jailreq()
{
	local parameter="$1"

	if [ -z "${parameter}" ]; then
		lib_err ${EX_USAGE} "usage: lib_check_jailreq parameter"
	fi

	if printf "%s" "${parameter}" | grep -Eq '^\*'; then
		return 0
	else
		return 1
	fi
}

lib_split_jailparams()
{
	local parameter="$1"

	if [ -z "${parameter}" ]; then
		lib_err ${EX_USAGE} "usage: lib_split_jailparams parameter"
	fi

	lib_split_sjailparams "${parameter}" | sed -Ee $'s/^["]//' -e $'s/["]$//'
}

lib_split_sjailparams()
{
	local parameter="$1"

	if [ -z "${parameter}" ]; then
		lib_err ${EX_USAGE} "usage: lib_split_jailparams parameter"
	fi

	lib_split_ujailparams "${parameter}" | sed -Ee "s/\\\\([\"])/\1/g"
}

lib_split_ujailparams()
{
	local parameter="$1"

	if [ -z "${parameter}" ]; then
		lib_err ${EX_USAGE} "usage: lib_split_ujailparams parameter"
	fi

	printf "%s" "${parameter}" | grep -Eoe $'[^ ]+' -e $'["]([^"]|\\\\["])+["]'
}

config_help()
{
	cat << EOF
`config_usage`

${config_desc}

*DEPRECATED*: Do not try to use this command anymore, use \`appjail-config\` instead.

Parameters:
    -e                          -- Use EDITOR environment variable to edit the template.
    -g                          -- Get the value of a parameter.
    -I                          -- Insert a parameter as a new row.
    -K                          -- Return success if there is parameters marked as required.
    -k                          -- Get all parameters marked as required.
    -s                          -- Set the value of a parameter.
    -x                          -- Remove a parameter.

Options:
    -j jail_name                -- Use the template of this jail.
    -t template                 -- Use this template.

Options for -g, -I, -s and -x:
    -a parameter[=value]        -- Parameter and its value. The value is ignored by -g and -x.

Options for -g, -s and -x
    -C column                   -- Index column to edit a specific parameter in a list separated by \`+=\`.
    -R row                      -- Index row to edit a specific parameter in a list separated by \`,\`.

Options for -g and -x:
    -A                          -- Dump or remove all parameters.
    -i                          -- Ignore unknown variables. Using this option together with -x, suppresses
                                   some messages and does not modify the template when an error has occured.

Options for -g:
    -c                          -- Check only. Return success if all requested parameters exist.
    -l                          -- Show only columns as a list.
    -N                          -- Show only parameter names, not their values.
    -n                          -- Show only parameter values, not their names.
    -P                          -- Show all matching parameters, not just one.

Options for -x:
    -P                          -- Remove all matching parameters, not just one.

Options for -I and -s:
    -r                          -- Mark the parameter as required.

Options for -s:
    -o                          -- Insert the value as a new column in the parameter.
EOF
}

config_usage()
{
	cat << EOF
usage: config -e [-j jail_name | -t template]
       config -ga parameter [-cilNnP] [-C column] [-R row]
       config -gc [-j jail_name | -t template] [-a parameter ...] [-P]
       config -gl [-j jail_name | -t template] [-a parameter ...] [-P]
       config -gA [-j jail_name | -t template] [-l]
       config -K [-j jail_name | -t template]
       config -k [-j jail_name | -t template]
       config -s [-j jail_name | -t template] [-a parameter[=value] ...] [-r] [-C column] [-R row]
       config -so [-j jail_name | -t template] [-a parameter[=value] ...] [-r] [-R row]
       config -I [-j jail_name | -t template] [-a parameter[=value] ...] [-r]
       config -x [-j jail_name | -t template] [-A | [-a parameter ...]] [-iP] [-C column] [-R row]
EOF
}
